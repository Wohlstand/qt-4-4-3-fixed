/****************************************************************************
**
** Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).
** Contact: Qt Software Information (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License versions 2.0 or 3.0 as published by the Free
** Software Foundation and appearing in the file LICENSE.GPL included in
** the packaging of this file.  Please review the following information
** to ensure GNU General Public Licensing requirements will be met:
** http://www.fsf.org/licensing/licenses/info/GPLv2.html and
** http://www.gnu.org/copyleft/gpl.html.  In addition, as a special
** exception, Nokia gives you certain additional rights. These rights
** are described in the Nokia Qt GPL Exception version 1.3, included in
** the file GPL_EXCEPTION.txt in this package.
**
** Qt for Windows(R) Licensees
** As a special exception, Nokia, as the sole copyright holder for Qt
** Designer, grants users of the Qt/Eclipse Integration plug-in the
** right for the Qt/Eclipse Integration to link to functionality
** provided by Qt Designer and its related libraries.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
**
****************************************************************************/

/*!
    \example draganddrop/draggableicons
    \title Draggable Icons Example

    The Draggable Icons example shows how to drag and drop image data between widgets
    in the same application, and between different applications.

    \image draggableicons-example.png

    In many situations where drag and drop is used, the user starts dragging from
    a particular widget and drops the payload onto another widget. In this example,
    we subclass QLabel to create labels that we use as drag sources, and place them
    inside \l{QWidget}s that serve as both containers and drop sites.

    In addition, when a drag and drop operation occurs, we want to send more than
    just an image. We also want to send information about where the user clicked in
    the image so that the user can place it precisely on the drop target. This level
    of detail means that we must create a custom MIME type for our data.

    \section1 DragWidget Class Definition

    The icon widgets that we use to display icons are subclassed from QLabel:

    \snippet examples/draganddrop/draggableicons/dragwidget.h 0

    Since the QLabel class provides most of what we require for the icon, we
    only need to reimplement the \l QWidget::mousePressEvent() to provide
    drag and drop facilities.

    \section1 DragWidget Class Implementation

    The \c DragWidget constructor sets an attribute on the widget that ensures
    that it will be deleted when it is closed:

    \snippet examples/draganddrop/draggableicons/dragwidget.cpp 0

    To enable dragging from the icon, we need to act on a mouse press event.
    We do this by reimplementing \l QWidget::mousePressEvent() and setting up
    a QDrag object.

    \snippet examples/draganddrop/draggableicons/dragwidget.cpp 1

    Since we will be sending pixmap data for the icon and information about the
    user's click in the icon widget, we construct a QByteArray and package up the
    details using a QDataStream.

    For interoperability, drag and drop operations describe the data they contain
    using MIME types. In Qt, we describe this data using a QMimeData object:

    \snippet examples/draganddrop/draggableicons/dragwidget.cpp 2

    We choose an unofficial MIME type for this purpose, and supply the QByteArray
    to the MIME data object.

    The drag and drop operation itself is handled by a QDrag object:

    \snippet examples/draganddrop/draggableicons/dragwidget.cpp 3

    Here, we pass the data to the drag object, set a pixmap that will be shown
    alongside the cursor during the operation, and define the position of a hot
    spot that places the position of this pixmap under the cursor.

*/
