/****************************************************************************
**
** Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).
** Contact: Qt Software Information (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License versions 2.0 or 3.0 as published by the Free
** Software Foundation and appearing in the file LICENSE.GPL included in
** the packaging of this file.  Please review the following information
** to ensure GNU General Public Licensing requirements will be met:
** http://www.fsf.org/licensing/licenses/info/GPLv2.html and
** http://www.gnu.org/copyleft/gpl.html.  In addition, as a special
** exception, Nokia gives you certain additional rights. These rights
** are described in the Nokia Qt GPL Exception version 1.3, included in
** the file GPL_EXCEPTION.txt in this package.
**
** Qt for Windows(R) Licensees
** As a special exception, Nokia, as the sole copyright holder for Qt
** Designer, grants users of the Qt/Eclipse Integration plug-in the
** right for the Qt/Eclipse Integration to link to functionality
** provided by Qt Designer and its related libraries.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
**
****************************************************************************/

/*!
    \example xmlpatterns/xquery/globalVariables
    \title C++ Source Code Analyzer Example

    The C++ source code analyzer example shows how to
    write a real world XQuery query.

    \section1 Overview

    Sometimes it is of use to analyze C++ code, in order to find
    common mistakes & patterns. For that one can use search & text
    utilites like \c grep on UNIX, or try to write ones own C++ parser
    and subsequently do search there.

    But what if there were a simpler but still as correct approach?

    g++, the open source C++ compiler, has an extension called GCC-XML that
    outputs the declarations in a compilation unit(a C++ file) in XML. Since
    that "C++ to XML" conversion is done with GCC itself, it means the parsing
    of the C++ code is done with one of the best C++ parsers on this planet.

    Once the C++ is in XML, a query can swiftly navigate it to
    produce a report.

    \section1 Global variables

    Usually one wants to avoid global mutable variables in C++, since they have
    a state globally and therefore often is a source to bugs, especially related
    to threading. 

    For instance, in globals.cpp, the global, mutable integers as
    well as the global class instances should preferrably be avoided:

    \quotefromfile examples/xmlpatterns/xquery/globalVariables/globals.cpp
    \printuntil

 */
